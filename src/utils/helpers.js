const {createCollectIterator} = require("vk-io");

const api = require("./api");

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function randomInt(min, max) {
    let rand = min + Math.random() * (max + 1 - min);
    return Math.floor(rand);
}

function question(rl, prompt) {
    return new Promise((resolve, reject) => {
        rl.question(prompt, (answer) => {
            resolve(answer);
        });
    });
}

async function deleteConversationsHelper(count, parallelRequests, minDelay, maxDelay) {
    const iterator = createCollectIterator({
        api,
        method: 'messages.getConversations',
        countPerRequest: count <= 200 ? count : 200,
        parallelRequests: parallelRequests,
        maxCount: count
    });

    console.log(`\n[üìú] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤...`)

    for await (const chunk of iterator) {
        const conversationsList = chunk.items.map(el => el.conversation.peer.id)
        console.log(`\n[‚ùó] –ó–∞–ø—É—Å–∫–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏\n[üìù] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤: ${count}\n[üöÄ] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${parallelRequests}\n[‚è≥] –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${minDelay}\n[‚è≥] –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ${maxDelay}\n`)
        for (let conversation in conversationsList) {
            try {
                await api.messages.deleteConversation({
                    [(/^-/.test(conversation) || conversation.startsWith("2000000")) ? 'peer_id' : 'user_id']: conversationsList[conversation]
                })
                console.log(`[üóëÔ∏è] [${Number(conversation) + 1}/${count}] –£–¥–∞–ª–µ–Ω–æ: ${conversationsList[conversation]}`)
                await sleep(randomInt(minDelay, maxDelay))
            } catch (error) {
                console.log(`[‚ùå] [${Number(conversation) + 1}/${count}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ ${conversationsList[conversation]}: `, error.message)
                console.log(`[üîÑ] –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è...`)
            }
        }
    }
    console.log(`[‚úÖ] ${count} –¥–∏–∞–ª–æ–≥–æ–≤ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ`)
}

async function deleteConversations(count, parallelRequests, minDelay, maxDelay, isCycle) {
    if (isCycle) {
        while (true) {
            await deleteConversationsHelper(count, parallelRequests, minDelay, maxDelay);
        }
    } else {
        await deleteConversationsHelper(count, parallelRequests, minDelay, maxDelay);
    }
}

module.exports = {
    question,
    deleteConversations
};